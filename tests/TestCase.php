<?php


namespace JBernavaPrah\EloquentBinaryCast\Tests;


use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\PostgresConnection;
use JBernavaPrah\EloquentBinaryCast\BinaryCast;

use Illuminate\Database\Capsule\Manager;
use Mockery\LegacyMockInterface;
use Mockery\MockInterface;


class TestCase extends \PHPUnit\Framework\TestCase
{

    protected Model $model;
    /**
     * @var BinaryCast|LegacyMockInterface|MockInterface
     */
    protected $binaryTest;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $db = new Manager();
        $db->addConnection([
            'driver' => 'sqlite',
            'database' => ':memory:',
            'prefix' => '',
        ]);
        $db->addConnection([
            'driver' => 'pgsql',
            'database' => ':memory:',
            'prefix' => '',
        ], 'pgsql');
        $db->setAsGlobal();
        $db->bootEloquent();

        $this->model = new class extends Model {

        };


    }

    public function testConnectionDifferentFromPostgresql()
    {

        $cast = new BinaryCast();

        $this->assertFalse($this->model->getConnection() instanceof PostgresConnection);

        $this->assertEquals('some_value', $cast->get($this->model, 'some_key', 'some_value', []));
        $this->assertEquals('some_value', $cast->set($this->model, 'some_key', 'some_value', []));

    }


    public function testConnectionWithPostgresql()
    {

        $this->model->setConnection('pgsql');

        $this->assertTrue($this->model->getConnection() instanceof PostgresConnection);

        $cast = new BinaryCast();

        $this->assertEquals('736f6d655f76616c7565', $cast->set($this->model, 'some_key', 'some_value', []));
        $this->assertEquals(hex2bin(bin2hex('some_value')), $cast->get($this->model, 'some_key', bin2hex('some_value'), []));

    }

}